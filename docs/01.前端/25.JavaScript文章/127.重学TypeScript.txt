---
title: 重学TypeScript
date: 2022-03-06 11:50:12
permalink: /pages/5b4d22/
categories:
  - 前端
  - JavaScript文章
tags:
  - 
---

# 为什么要有 TypeScript

TypeScript是JavaScript的超集，因为它扩展了JavaScript，有JavaScript没有的东西。硬要以父子类关系来说的话，TypeScript是JavaScript子类，继承的基础上去扩展。

TypeScript诞|生的根本原因是JavaScript是弱类型语言（可以隐性的进行语言类型转变），无法做到在编译阶段进行类型检查，提早发现错误。

TypeScript的初衷就是为了做类型检查，提早发现错误，所以「类型」是其最核心的特性。当然它只是给出你代码可能不会按预期执行的警告，比如你未按照声明的类型传参，你的代码还是可以运行的。这一点与强类型语言还是有本质的区别，强类型语言会直接导致编译不通过，因为TypeScript只是转译。

跟JavaScript不同，TypeScript文件后缀使用 .ts扩展名。浏览器是不识别 .ts 文件，所以使用时必须提前把 TS 代码转换成 JavaScript 代码。这个转换过程被称为转译，编译和转译的微小差别在于：

- 编译是把源码转变成另一种语言
- 转译是把源码转变另一个相同抽象层级的语言

学习TypeScript导致了这么几个问题：

1.学习成本增加；
2.代码量增加；
3.代码复杂度增加

当然TypeScript带来的收益是可观的，静态检查使得提前发现错误，在前端工程化开发的今天确实有必要，因为团队成员技术水平参差不齐，TypeScript可以帮助避免很多错误的发生，当然如果你是any大法的信仰者，我劝你善良。不要为了用TypeScript而用TypeScript，用它的前提一定要是它能帮你解决特定的问题。

TypeScript提供最新的和不断发展的JavaScript特性，包括那些来自2015年的ECMAScript和未来的提案中的特性，比如异步功能和Decorators，以帮助建立健壮的组件。

# 正文

## 基础类型

## JS的八种内置类型

- 字符串（string）
- 数字（number）
- 布尔值（boolean）
- 未定义（undefined）
- 空值（null）
- 对象（object）
- 大整数（bigInt，ES6 新增）
- 符号（symbol，ES6 新增）

TS一一对应的example(冒号后面有无空格都可以):

```typescript
let name: string = "bob";
let age: number = 37;
let isDone: boolean = false;
let u: undefined = undefined;
let n: null = null;
let obj: object = {x: 1};
let bigLiteral: bigint = 100n;
let sym: symbol = Symbol("me");
```

## Array

对数组类型的定义有两种方式：

```typescript
// 元素类型[]
let list: number[] = [1, 2, 3];
// Array<元素类型>
let list: Array<number> = [1, 2, 3];
```

定义指定对象成员的数组：

```typescript
interface MyObject {
    name: string;
    age: number;
}

let arr: MyObject[] = [{name: "兔兔", age: 18}] // OK
```

## Tuple

上面定义数组类型的方式，只能定义出内部全为某种类型的数组。对于内部不同类型的数组可以使用元组类型来定义：

```typescript
let x: [string, number];

x = ['hello', 10]; // OK
x = [10, 'hello']; // Error
```

注意，元组类型只能表示一个已知元素数量和类型的数组，长度已指定，越界访问会提示错误。例如，一个数组中可能有多种类型，数量和类型都不确定，那就直接any[]。


## undefined和null

注意这俩比较特殊

默认情况下null和undefined是所有类型的子类型。 就是说你可以把null和undefined赋值给任何类型的变量。

```typescript
let str: string = 'hello';
str = null; // OK
str = undefined; // OK

let a: null = undefined; // OK
let b: undefined = null; // OK


```

当然也可以通过指定--strictNullChecks标记，开启严格模式检查。这种情况下，null和undefined和其他类型是平等关系，只能赋值给any和它们各自的类型，有一个例外是undefined还可以赋值给void类型（想想你为一个函数声明返回类型为void时，但函数在未显式return的情况下，默认返回的就是undefined，此时就是这个例外的表现）。



## void

void表示没有任何类型，和其他类型是平等关系，不能直接赋值:

```typescript
let a: void;
let b: number = a; // Error
```

你只能为它赋予null（只在--strictNullChecks未指定时）和undefined。声明一个void类型的变量没有什么大用，我们一般也只有在函数没有返回值时去声明。

值得注意的是，方法没有返回值将得到undefined，但是我们需要定义成void类型，而不是undefined类型。否则将报错:

```typescript
function fun(): undefined {
  console.log("this is TypeScript");
};
fun(); // Error
```

## any和unknown

any会跳过类型检查器对值的检查，任何值都可以赋值给any类型，它通常被称为top type，所以会有any大法好的说法。

```typescript
let notSure: any = 4;
notSure = "maybe a string instead"; // OK
notSure = false; // OK
```

unknown与any一样，所有类型都可以分配给unknown:

```typescript
let notSure: unknown = 4;
notSure = "maybe a string instead"; // OK
notSure = false; // OK
```

unknown与any的最大区别是：

unknown 是 top type (任何类型都是它的 subtype) , 而 any 既是 top type, 又是 bottom type (它是任何类型的 subtype ) , 这导致 any 基本上就是放弃了任何类型检查

因为any既是top type, 又是 bottom type，所以任何类型的值可以赋值给any，同时any类型的值也可以赋值给任何类型。但unknown 只是 top type，任何类型的值都可以赋值给它，但它只能赋值给unknown和any，因为只有它俩是top type。

```typescript
let notSure: unknown = 4;
let uncertain: any = notSure; // OK

let notSure: any = 4;
let uncertain: unknown = notSure; // OK

let notSure: unknown = 4;
let uncertain: number = notSure; // Error

```

如果不缩小类型，就无法对unknown类型执行任何操作：

```typescript
function getDog() {
 return '123'
}
 
const dog: unknown = {hello: getDog};
dog.hello(); // Error
```

这种机制起到了很强的预防性，更安全，这就要求我们必须缩小类型，我们可以使用typeof、类型断言等方式来缩小未知范围：

```typescript
function getDogName() {
 let x: unknown;
 return x;
};

const dogName = getDogName();

// 直接使用
const upName = dogName.toLowerCase(); // Error
 
// typeof
if (typeof dogName === 'string') {
  const upName = dogName.toLowerCase(); // OK
}

// 类型断言 
const upName = (dogName as string).toLowerCase(); // OK

```



## never

never类型表示的是那些永不存在的值的类型。

值会永不存在的两种情况：

如果一个函数执行时抛出了异常，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；


函数中执行无限循环的代码（死循环），使得程序永远无法运行到函数返回值那一步，永不存在返回。

```typescript
// 异常
function err(msg: string): never { // OK
  throw new Error(msg); 
}

// 死循环
function loopForever(): never { // OK
  while (true) {};
}

```

never类型同null和undefined一样，也是任何类型的子类型，也可以赋值给任何类型：

```typescript
let err: never;
let num: number = 4;

num = err; // OK
```

但是没有类型是never的子类型或可以赋值给never类型（除了never本身之外），即使any也不可以赋值给never：

```typescript
let ne: never;
let nev: never;
let an: any;

ne = 123; // Error
ne = nev; // OK
ne = an; // Error
ne = (() => { throw new Error("异常"); })(); // OK
ne = (() => { while(true) {} })(); // OK

```

重点： never与其他类型的联合后，是没有never的

```typescript
// type Eg2 = string | number
type Eg2 = string | number | never
```

## 类型断言

类型断言好比其它语言里的类型转换，类型转换通常发生在你比TS更了解某个值的详细信息的时候。

两种方式实现：

```typescript
// 尖括号 语法
let someValue: any = "this is a string";
let strLength: number = (<string>someValue).length;

// as 语法
let someValue: any = "this is a string";
let strLength: number = (someValue as string).length;


```

## 类型推论

如果没有明确的指定类型，那么 TypeScript 会依照类型推论的规则推断出一个类型。

```typescript
let myFavoriteNumber = 'seven';
myFavoriteNumber = 7; // Error
```

为什么是Error，因为事实上，它等价于：

```typescript
let myFavoriteNumber: string = 'seven';
myFavoriteNumber = 7; // Error
```

TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。

如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查：

```typescript
let myFavoriteNumber;
myFavoriteNumber = 'seven';
myFavoriteNumber = 7;
```

## 联合类型

联合类型表示取值可以为多种类型中的一种，使用 | 分隔每个类型。

```typescript
let myFavoriteNumber: string | number;
myFavoriteNumber = 'seven'; // OK
myFavoriteNumber = 7; // OK
```

## 交叉类型

交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性，使用&定义交叉类型。

```typescript
interface A {
  name: string,
  age: number
}
interface B {
  name: string,
  gender: string
}

let a: A & B = { // OK
    name: "兔兔",
    age: 18,
    gender: "男"
};

```

a既是A类型，同时也是B类型。

注意点：交叉类型取的多个类型的并集，但是如果key相同但是类型不同，则该key为never类型。

```typescript
type A = string & number // A 为 never 类型

let a: A = (() => {throw new Error()})(); // OK
```


## 接口

首先，通俗的理解下此处接口的概念：一般后台定义接口就是前端调用的接口，定义一些参数等，TS里的接口类似，也可以理解为定义一些参数，规定变量里面有什么参数，参数是什么类型，使用时就必须有这些对应类型的参数，少或者多参数、参数类型不对都会报错。更简单的，你可以理解为这就是在定义一个较为详细的对象类型。

第一个示例：

```typescript
function printLabel(labeledObj: { label: string }) {
  console.log(labeledObj.label);
}
let myObj = { size: 10, label: "Size 10 Object" };
printLabel(myObj); // OK

```

你懒的写interface，可以这么写。这种写法，较为宽松，只会检查那些必需的属性是否存在。

第二个示例：

```typescript
interface LabeledValue {
  label: string;
}
function printLabel(labeledObj: LabeledValue) {
  console.log(labeledObj.label);
}
let myObj = { size: 10, label: "Size 10 Object" };
printLabel(myObj); // OK


```

这种写法也是宽松的，同上也是因为发生了赋值。


注意：在 type、interface 中可以使用逗号、分号，class 中不能用逗号。不过三者都支持行结尾不要符号。


## 为什么赋值就使得类型检测变得宽松了

TypeScript 的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做鸭式辨型法或结构性子类型化。

所谓的鸭式辨型法就是像鸭子一样走路并且嘎嘎叫的就叫鸭子，即具有鸭子特征的认为它就是鸭子，也就是通过制定规则来判定对象是否实现这个接口(当然在TS里面不这样说)。

上面代码，在参数里写对象就相当于是直接给labeledObj赋值，这个对象有严格的类型定义，所以不能多参或少参。而当你在外面将该对象用另一个变量myObj接收，myObj不会经过额外属性检查，但会根据类型推论为let myObj: { size: number; label: string } = { size: 10, label: "Size 10 Object" };，然后将这个myObj再赋值给labeledObj，此时根据类型的兼容性，两种类型对象，参照鸭式辨型法，因为都具有label属性，所以被认定为两个相同，故而可以用此法来绕开多余的类型检查

```typescript
interface LabeledValue {
  label: string;
}
function printLabel(labeledObj: LabeledValue) {
  console.log(labeledObj.label);
}

printLabel({ size: 10, label: "Size 10 Object" }); // Error

```

##可选属性

```typescript
interface Props { 
  name: string; 
  age: number; 
  money?: number;
}
```

可选属性就是在可选属性名字定义的后面加一个?符号，来证明该属性是可有可无的。

## 只读属性

```typescript
interface Point {
  readonly x: number;
  readonly y: number;
}

let p: Point = { x: 10, y: 20 };
p.x = 5; // Error
```

在属性名前用readonly关键字来指定只读属性，该对象属性只能在对象刚刚创建的时候修改其值，与const类似，但const只能防止修改基础类型，对于引用类型只是防止修改引用地址，内部属性是可以变的，防止修改引用类型的内部属性，应该使用readonly。

## ReadonlyArray

对于数组，TS还有ReadonlyArray<T>类型，此类型将数组的所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：

```typescript
let a: number[] = [1, 2, 3, 4];
let ro: ReadonlyArray<number> = a;
ro[0] = 12; // Error
ro.push(5); // Error
ro.length = 100; // Error

a = ro; // Error


```


最后一行，可以看到就算把整个ReadonlyArray赋值到一个普通数组也是不可以的，此时可以使用类型断言：

```typescript
a = ro as number[];
```

注意：readonly声明的只读数组类型与ReadonlyArray声明的只读数组类型，二者等价。

证明：

```typescript
let arr1: readonly number[] = [1, 2];
let arr2: ReadonlyArray<number> = [1, 2, 3];

arr1[0] = 0; // Error
arr2[0] = 0; // Error
arr1.push(3); //Errpr
arr2.push(4); //Error
arr1 = arr2; // OK
```

## 绕开额外属性检查的方式

1.类型兼容

一开始的例子就已经阐述的很彻底了，利用赋值操作，不再赘述。

2.类型断言

类型断言的意义就等同于你在告诉程序，你很清楚自己在做什么，此时程序自然就不会再进行额外的属性检查了。

```typescript
interface Props { 
  name: string; 
  age: number; 
  money?: number;
}

let p: Props = {
  name: "兔神",
  age: 25,
  money: -100000,
  girl: false
} as Props; // OK


```

3.索引签名

```typescript
interface Props { 
  name: string; 
  age: number; 
  money?: number;
  [key: string]: any;
}

let p: Props = {
  name: "兔神",
  age: 25,
  money: -100000,
  girl: false
}; // OK

```


## 任意属性

TypeScript 支持两种索引签名：字符串和数字。

一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集，因为确定属性与可选属性也算任意属性中的一种：

```typescript
interface Person {
    name: boolean; // Error
    age?: number; // Error
    sex: string; // OK
    girl: undefined; // OK
    [propName: string]: string;
}
```

可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用number来索引时，JavaScript 会将它转换成string然后再去索引对象。

```typescript
class Animal {
  name: string;
}
class Dog extends Animal {
  breed: string;
}

interface NotOkay {
  [x: number]: Animal; // Error
  [x: string]: Dog;
}

interface Okay {
  [x: number]: Dog; // OK
  [x: string]: Animal;
}
```

还有一点我们需要注意，当任意属性使用联合类型且属性中存在可选属性时，需要联合undefined类型，否则编译报错，原因显而易见，因为可选属性可有可无：

```typescript
interface Props { 
  name: string; 
  age: number; 
  money?: number; // 这里真实的类型应该为：number | undefined
  [key: string]: string | number | undefined;
}

let p: Props = {
  name: "兔神",
  age: 25,
  money: -100000
}; // OK

```

额外的，你也可以将任意属性设置为只读，防止给属性赋值。


## 接口继承接口

接口继承接口使用关键字extends, 继承的本质是复制，抽出共同的代码，所以子接口拥有父接口的类型定义:

```typescript
interface Shape {
  color: string;
}
interface Square extends Shape {
  sideLength: number;
}

let square: Square = { sideLength: 1 }; // Error
let square1: Square = { sideLength: 1, color: 'red' }; // OK

```

TS中与众不同的一点：接口可以多继承。

```typescript
interface Shape {
  color: string;
}
interface PenStroke {
  penWidth: number;
}
interface Square extends Shape, PenStroke {
  sideLength: number;
}

let square: Square = { sideLength: 1 } // Error
let square1: Square = { sideLength: 1, color: 'red' } // Error
let square2: Square = { sideLength: 1, color: 'red', penWidth: 2 } // OK

```

这里需要注意的一点是，大部分语言是不支持多继承的，原因显而易见，多继承会引发混乱：

1.若子类继承的父类中拥有相同的成员变量，子类在引用该变量时将无法判别使用哪个父类的成员变量；

2.若一个子类继承的多个父类拥有相同方法，同时子类并未覆盖该方法（若覆盖，则直接使用子类中该方法），那么调用该方法时将无法确定调用哪个父类的方法。


python支持多继承，所谓的多继承，本质就是mixin，JS也可以利用mixin实现多继承。

在TS中，若多继承的两个或多个父接口有相同属性，但定义的类型不同，TS会直接报错，并未采取mixin策略。对于这点，我想反问一句：既然是抽出共同的代码，那你又何必把共性代码到处放呢？TS就是这样想的，这应该能解决掉你的困惑。所以在使用多继承时，先确保父接口没有共有属性，或共有属性定义的类型都相同。


```typescript
interface Shape {
  name: string;
  color: string;
}
interface PenStroke {
  name: number;
  penWidth: number;
}
interface Square extends Shape, PenStroke { // Error
  sideLength: number;
}

```

```typescript
interface Shape {
  name: string;
  color: string;
}
interface PenStroke {
  name: string;
  penWidth: number;
}
interface Square extends Shape, PenStroke { // OK
  sideLength: number;
}
let square: Square = { // OK
    sideLength: 1, 
    color: 'red', 
    penWidth: 12, 
    name: '兔神'
}


```

## 接口中的 new

在TS的官网示例中，有看到

```typescript

interface ClockConstructor {
  new (hour: number, minute: number): any;
}
```


这样的写法，让人很是疑惑。官网对于接口中使用new也没有详细的说明，只有例子，这一点很差劲。


我的理解是：new后面跟构造函数，是用来创建实例的。而接口是用来描述对象类型的，那么包含构造函数的对象类型是什么？答案是类 class。


```typescript
// 例1
interface ClockConstructor {
  new (hour: number, minute: number): any;
}

let C:ClockConstructor = class {} // OK

// 例2
interface CPerson {
  new(name: string): Date;
}

let p: CPerson = class People extends Date {} // OK


```

我们没有显示声明constructor，所以这里会有一个空的constructor函数顶上来。在这里我发现检测比较奇怪：

```typescript
interface ClockConstructor {
  new (hour: number, minute: number): any;
}

let C:ClockConstructor = class { // OK
    constructor() {}
}

let C1:ClockConstructor = class { // OK
    constructor(h: number) {}
}
 
let C2:ClockConstructor = class { // OK
    constructor(h: number, m: number) {}
}

let C3:ClockConstructor = class { // Error
    constructor(h: string, m: number) {}
}

let C4:ClockConstructor = class { // Error
    constructor(h: number, m: number, b: number) {}
}

```

这里的检测机制我们看到的是：参数少的，兼容参数多的，并不严格。我很疑惑，当学习到后面的时候，才发现原来这里是有个双向协变的概念:

Ts在函数参数的比较中实际上默认采取的策略是双向协变：只有当源函数参数能够赋值给目标函数或者反过来时才能赋值成功。


## 函数类型

### 函数声明

```typescript
function sum(x: number, y: number): number {
    return x + y;
}
```

### 函数表达式

```typescript
let mySum: (x: number, y: number) => number = function (x: number, y: number): number {
    return x + y;
};
```

在 TypeScript 的类型定义中，=> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。切忌与ES6的箭头函数混淆了。

#### 用接口定义函数类型


```typescript
interface SearchFunc{
  (source: string, subString: string): boolean;
}

let mySearch: SearchFunc = function(source: string, subString: string) { // OK
  let result = source.search(subString);
  return result >-1;
};

```

采用函数表达式接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。

#### 函数中的 this 声明

TypeScript会通过代码流分析来推断出this在函数中应该是什么，我们也可以明确指定函数中的this应是何种类型。示例如下：

```typescript
interface Obj {
    fn: (this: Obj, name: string) => void;
}

let obj: Obj = {
    fn(name: string) {}
}

obj.fn("兔兔"); // OK
```

因为JavaScript规范规定你不能有一个名为this的参数，所以TypeScript使用这个语法空间来让你在函数体中声明this的类型。

注意：这个this类型声明必须放在参数的首位：

```typescript
interface Obj {
    // Error：A 'this' parameter must be the first parameter
    fn: (name: string, this: Obj) => void;
}
```

再来一个更好的例子，感受一下：

```typescript
interface Obj {
    fn: (this: Obj, name: string) => void;
}

let obj: Obj = {
    fn(name: string) {}
}

let rab: Obj ={
    fn(name: string) {}
}

obj.fn("兔兔"); // OK
obj.fn.call(rab, "兔兔"); // OK
obj.fn.call(window, "兔兔"); // Error: this 应该为 Obj 类型


```

可选参数

```typescript
function buildName(firstName: string, lastName?: string) {
    if (lastName) {
        return firstName + ' ' + lastName;
    } else {
        return firstName;
    }
}
let tomcat = buildName('Tom', 'Cat');
let tom = buildName('Tom');

```


注意点：可选参数后面不允许再出现必需参数

参数默认值

```typescript
function buildName(firstName: string, lastName: string = 'Cat') {
    return firstName + ' ' + lastName;
}
let tomcat = buildName('Tom', 'Cat');
let tom = buildName('Tom');

```

剩余参数


```typescript
function push(array: any[], ...items: any[]) {
    items.forEach(function(item) {
        array.push(item);
    });
}

let a = [];
push(a, 1, 2, 3);

```

重载

重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。

重载的概念在学JAVA（JAVA中的重载）的时候接触到的，JS是没有这个概念的，TS的重载个人感觉更应该称之为函数签名重载。因为最后函数实现的内部还是依赖判断类型来处理，前面的函数定义只是为了精确表达输入类型对应的输出类型。

```typescript
function reverse(x: number): number;
function reverse(x: string): string;
function reverse(x: number | string): number | string | void {
    if (typeof x === 'number') {
        return Number(x.toString().split('').reverse().join(''));
    } else if (typeof x === 'string') {
        return x.split('').reverse().join('');
    }
}

```

内置对象

ECMAScript 标准提供的内置对象有：

String、Number、Boolean、Error、Date、RegExp 等。

```typescript
let s: String = new String('兔神');
let n: Number = new Number(123);
let b: Boolean = new Boolean(1);
let e: Error = new Error('Error occurred');
let d: Date = new Date();
let r: RegExp = /[a-z]/;

```


DOM 和 BOM 的内置对象有: Document、HTMLElement、Event、NodeList 等。

```typescript
let body: HTMLElement = document.body;
let allDiv: NodeList = document.querySelectorAll('div');
document.addEventListener('click', function(e: MouseEvent) {
  // Do something
});

```

类数组对象IArguments:

```typescript
function sum() {
    let args: IArguments = arguments;
}
```

IArguments 实际上就是：

```typescript
interface IArguments {
    [index: number]: any;
    length: number;
    callee: Function;
}
```

当然还有很多，在这里可以看到 TypeScript 核心库的定义文件


##类型别名

类型别名就是给一种类型起个别的名字，之后只要使用这个类型的地方，都可以用这个名字作为类型代替。它只是起了一个名字，并不是创建了一个新类型。使用type关键字来定义：


```typescript
type StringType = string;
let str: StringType;
str = 'hello';
str = 123 // Error
```

注意：类型别名不能被extends和implements，且不能出现在声明右侧的任何地方。

type实现继承，则可以使用交叉类型type A = B & C & D。

##字符串字面量类型

字符串字面量类型用来约束取值只能是某几个字符串中的一个。


```typescript
type Name = 'ALisa' | 'Bob' | 'Cola'

let name: Name = 'Alisa'; // Error ①
let name1: Name = 'ALisa'; // OK
let name2: Name = 'Bob'; // OK
let name3: Name = 'Cola'; // OK
let name4: Name = '兔兔'; // Error
```

上面的报错①原因在于：

在默认状态下，TS 将 DOM typings 作为全局的运行环境，所以当我们声明 name时， 与 DOM 中的全局 window 对象下的 name 属性出现了重名。因此，报了 Cannot redeclare block-scoped variable 'name' 错误。

## Enum 枚举类型

枚举是一个被命名的整型常数的集合，枚举在日常生活中很常见，例如表示星期的SUNDAY、MONDAY、TUESDAY、WEDNESDAY、THURSDAY、FRIDAY、SATURDAY就是一个枚举。

枚举是一种数据结构，使用枚举我们可以定义一些带名字的常量，清晰地表达意图或创建一组有区别的用例。 TS支持数字的和基于字符串的枚举。

## 数字枚举

使用枚举来定义一周的7天：

```typescript
enum Days {Sun, Mon, Tue, Wed, Thu, Fri, Sat};
```



枚举成员会被赋值为从 0 开始递增的数字，我们可以像访问对象属性一样访问枚举成员：

```typescript
console.log(Days.Sun) // 0
console.log(Days.Mon) // 1
......
console.log(Days.Sat) // 6
```

我们还可以初始化枚举成员，那么该初始化成员后面的成员会在它的基础上自动增长1:

```typescript
enum Days {Sun = 1, Mon, Tue, Wed, Thu, Fri, Sat};

console.log(Days.Sun) // 1
console.log(Days.Mon) // 2
......
console.log(Days.Sat) // 7

```

## 字符串枚举

字符串枚举很简单，直接赋给每个成员字符串字面量：

```typescript
enum Direction {
    Up = "UP",
    Down = "DOWN",
    Left = "LEFT",
    Right = "RIGHT",
}
```

## 异构枚举

异构枚举也就是说，枚举可以混合字符串和数字成员：

```typescript
enum Direction {
    name = '兔兔',
    age = 18
}
```

## 可以计算的成员

可以计算的成员意思就是，初始化枚举成员时，可以使用表达式、函数等方式动态求值，还可以是对之前定义的常量枚举成员的引用。

需高度重视的一点：使用可计算的成员前提是，当前枚举必须为数字枚举，即所有成员都必须为number类型。

```typescript
enum Direction {
    None,
    Read = 1 << 1,
    Write = 1 << 2,
    ReadWrite = Read | Write,
    G = "123".length,
    Age = 18,
    Sex = getSex()
}

function getSex() {
    return 12
}

```

若常量枚举表达式求值后为NaN或Infinity，则会在编译阶段报错。


### const 枚举

通过在枚举上使用const修饰符来定义，可以避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问。





